{"version":3,"sources":["webpack:///./src/app/start-game/start-game-routing.module.ts","webpack:///./src/app/start-game/start-game.module.ts","webpack:///./src/app/start-game/start/start.component.css","webpack:///./src/app/start-game/start/start.component.html","webpack:///./src/app/start-game/start/start.component.ts"],"names":[],"mappings":"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","file":"start-game-start-game-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { StartComponent } from './start/start.component';\n\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: StartComponent\r\n  }\r\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StartGameRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { StartGameRoutingModule } from './start-game-routing.module';\nimport { StartComponent } from './start/start.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StartGameRoutingModule,\n    FormsModule\n  ],\n  declarations: [StartComponent]\n})\nexport class StartGameModule { }\n","module.exports = \"li {\\r\\n  list-style-type: none;\\r\\n}\\r\\n\\r\\ninput {\\r\\n  width: 20%;\\r\\n  padding: 12px 20px;\\r\\n  margin: 8px 0;\\r\\n  display: inline-block;\\r\\n  border: 1px solid #ccc;\\r\\n  border-radius: 4px;\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.gameIsRunning, .showCardsAndScors, .roundStartedMessage {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.setBotCountClassBtn {\\r\\n  width: 20%;\\r\\n  background-color: #4CAF50;\\r\\n  color: white;\\r\\n  padding: 14px 20px;\\r\\n  margin: 8px 0;\\r\\n  border: none;\\r\\n  border-radius: 4px;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.setBotCountClassBtn:hover {\\r\\n  background-color: #45a049;\\r\\n}\\r\\n\\r\\n.newGame, .newRound {\\r\\n  display: inline-block;\\r\\n  height: 50px;\\r\\n  line-height: 50px;\\r\\n  border: 1px solid white;\\r\\n  padding: 0 1rem;\\r\\n  margin-left: 29%;\\r\\n  background-color: #12e22d;\\r\\n}\\r\\n\\r\\n.newGame:hover, .newRound:hover {\\r\\n  background-color: #4CAF50;\\r\\n}\\r\\n\\r\\n.moreBtn, .stayBtn{\\r\\n  margin:15px;\\r\\n}\\r\\n\"","module.exports = \"<div>\\r\\n\\r\\n  <br />\\r\\n  <div class=\\\"roundStartedMessage\\\" *ngIf=\\\"newRoundIsStarted==true\\\">\\r\\n    <h3>\\r\\n      New Round Is Started\\r\\n    </h3>\\r\\n  </div>\\r\\n\\r\\n  <div *ngIf=\\\"gameIsRunning==false\\\" class=\\\"gameIsRunning\\\">\\r\\n\\r\\n    <input id=\\\"inputFieldBotCount\\\" [(ngModel)]=\\\"botCount\\\" type=\\\"number\\\" max=\\\"5\\\" min=\\\"1\\\" required />\\r\\n    <button class=\\\"setBotCountClassBtn\\\" (click)=\\\"setBotCount()\\\"><i class=\\\"fas fa-robot\\\"></i>&nbsp; Choose number of players!&nbsp;<i class=\\\"fas fa-robot\\\"></i></button>\\r\\n    <br />\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div *ngIf=\\\"gameIsRunning==true\\\">\\r\\n\\r\\n    <div class=\\\"showCardsAndScors\\\">\\r\\n\\r\\n      <ul>\\r\\n        <li *ngFor=\\\"let result of playersCards\\\">\\r\\n          {{result.player.name}}\\r\\n          <span *ngFor=\\\"let card of result.cards\\\">{{card.value}},</span>\\r\\n        </li>\\r\\n      </ul>\\r\\n\\r\\n      <br />\\r\\n\\r\\n      <h2>TOTAL SCORE</h2>\\r\\n\\r\\n      <ul>\\r\\n        <li *ngFor=\\\"let result of playersCards\\\">\\r\\n          {{result.player.name}}\\r\\n          <span>{{result.player.score}}</span>\\r\\n        </li>\\r\\n      </ul>\\r\\n\\r\\n\\r\\n      <div id=\\\"winner\\\" class=\\\"winner\\\">\\r\\n        <ul>\\r\\n          <li *ngFor=\\\"let result of winner\\\">\\r\\n            {{result.name}} win the game!\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n\\r\\n      <button class=\\\"moreBtn\\\" [disabled]=\\\"moreButtonDisabled\\\" (click)=\\\"playAgain()\\\">MORE</button>\\r\\n      <button class=\\\"stayBtn\\\" [disabled]=\\\"stayButtonDisabled\\\" (click)=\\\"playStay()\\\">STAY</button>\\r\\n\\r\\n    </div>\\r\\n    <br />\\r\\n\\r\\n    <button class=\\\"newRound\\\" (click)=\\\"startNewRound()\\\"><i class=\\\"fas fa-redo-alt\\\"></i>&nbsp;NEW Round</button>\\r\\n    <button class=\\\"newGame\\\" (click)=\\\"startNewGame()\\\"><i class=\\\"fas fa-arrow-circle-right\\\"></i>&nbsp;NEW Game</button>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { LogicService } from '../../logic.service';\nimport { Observable } from 'rxjs';\n\nimport { CardData } from '../../Interfaces/cardData';\nimport { PlayerData } from '../../Interfaces/playerData';\r\nimport { PlayersCards } from '../../Interfaces/playersCards';\r\nimport { Round } from '../../Interfaces/Round';\r\nimport { GameHistory } from '../../Interfaces/GameHistory';\nimport { debug } from 'util';\r\nimport { expandAggregates } from '@progress/kendo-data-query/dist/npm/transducers';\r\n\n@Component({\n  selector: 'app-start',\n  templateUrl: './start.component.html',\n  styleUrls: ['./start.component.css']\n})\nexport class StartComponent implements OnInit {\n\n  constructor(private _http: Http, private _logicService: LogicService) {\n    this.moreButtonDisabled = false;\n    this.gameIsRunning = false;\n    this.stayButtonDisabled = false;\n  }\n\n  cards: CardData[] = [];\n  players: PlayerData[] = [];\n  playersCards: PlayersCards[] = [];\n  winner: PlayersCards[] = [];\n  roundList: Round[] = [];\n  gameList: GameHistory[] = [];\n  maxWinScore: number = 21;\n\n  userName: string = \"You\";\n  botCount: number;\n  moreButtonDisabled: boolean;\n  stayButtonDisabled: boolean;\n  gameIsRunning: boolean;\n  newRoundIsStarted: boolean;\n\n  ngOnInit() {\n    this._http.get(\"/api/values\").subscribe(result => {\r\n      this.cards = result.json();\r\n    });\n  }\n\n\n  setBotCount() {\n    this.playersCards = null;\n    this.moreButtonDisabled = false;\n\n    if (this.botCount > 0 && this.botCount < 6) {\n      var inputField = document.getElementById(\"inputFieldBotCount\");\r\n      inputField.style.background = \"green\";\r\n    }\n    else {\n      var inputField = document.getElementById(\"inputFieldBotCount\");\r\n      inputField.style.borderColor = \"red\";\r\n      inputField.style.background = \"\";\r\n      return;\r\n    }\n\n    const url = `/api/values/${this.botCount}`;\n    this._http.get(url).subscribe(result => {\r\n      this.players = result.json();\r\n      this.gameIsRunning = true;\r\n      this.handOverCards();\r\n    }\r\n    );\r\n  }\n\n\n  handOverCards() {\n    this.newRoundIsStarted = true;\n    this._http.get(\"/api/gameLogic\").subscribe(result => {\r\n      this.playersCards = result.json();\r\n    });\n    return this.playersCards;\n  }\n\n\n  playAgain() {\n    this.newRoundIsStarted = false;\n    this._http.get(\"/api/gamelogic/PlayAgain/true\").subscribe(result => {\r\n      this.playersCards = result.json();\r\n\r\n      for (var i = 0; i < this.playersCards.length; i++) {\r\n        if (this.playersCards[i].player.score >= this.maxWinScore && this.playersCards[i].player.name == this.userName) {\r\n          this.defineTheWinner();\r\n          this.moreButtonDisabled = true;\r\n          this.stayButtonDisabled = true;\r\n        }\r\n      }\r\n\r\n    });\r\n  }\n\n\n  playStay() {\n    this.newRoundIsStarted = false;\n    this.moreButtonDisabled = true;\n    this._http.get(\"/api/gamelogic/PlayAgain/false\").subscribe(result => {\r\n      this.playersCards = result.json();\r\n      this.defineTheWinner();\r\n    });\r\n  }\n\n\n  defineTheWinner() {\n    this._http.get(\"/api/gamelogic/DefineTheWinner\").subscribe(result => {\r\n      this.winner = result.json();\r\n    });\r\n  }\n\n\n  startNewRound() {\n    this.newRoundIsStarted = true;\n    this.moreButtonDisabled = false;\n    this.stayButtonDisabled = false;\n    this._http.get(\"/api/gameLogic/StartNewRound\").subscribe(result => {\r\n      this.playersCards = result.json();\r\n    });\r\n  }\n\n\n  startNewGame() {\n    this.gameIsRunning = false;\r\n    this.newRoundIsStarted = false;\r\n    this.stayButtonDisabled = false;\r\n  }\n\n\n}\n\n"],"sourceRoot":""}